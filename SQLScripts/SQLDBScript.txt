USE [master]
GO
/****** Object:  Database [UnitConverter]    Script Date: 28-04-2023 15:22:05 ******/
CREATE DATABASE [UnitConverter]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'UnitConverter', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\UnitConverter.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'UnitConverter_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\UnitConverter_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT, LEDGER = OFF
GO
ALTER DATABASE [UnitConverter] SET COMPATIBILITY_LEVEL = 160
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [UnitConverter].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [UnitConverter] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [UnitConverter] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [UnitConverter] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [UnitConverter] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [UnitConverter] SET ARITHABORT OFF 
GO
ALTER DATABASE [UnitConverter] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [UnitConverter] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [UnitConverter] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [UnitConverter] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [UnitConverter] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [UnitConverter] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [UnitConverter] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [UnitConverter] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [UnitConverter] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [UnitConverter] SET  DISABLE_BROKER 
GO
ALTER DATABASE [UnitConverter] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [UnitConverter] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [UnitConverter] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [UnitConverter] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [UnitConverter] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [UnitConverter] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [UnitConverter] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [UnitConverter] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [UnitConverter] SET  MULTI_USER 
GO
ALTER DATABASE [UnitConverter] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [UnitConverter] SET DB_CHAINING OFF 
GO
ALTER DATABASE [UnitConverter] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [UnitConverter] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [UnitConverter] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [UnitConverter] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [UnitConverter] SET QUERY_STORE = ON
GO
ALTER DATABASE [UnitConverter] SET QUERY_STORE (OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_STORAGE_SIZE_MB = 1000, QUERY_CAPTURE_MODE = AUTO, SIZE_BASED_CLEANUP_MODE = AUTO, MAX_PLANS_PER_QUERY = 200, WAIT_STATS_CAPTURE_MODE = ON)
GO
USE [UnitConverter]
GO
/****** Object:  Table [dbo].[tblMetricImperialConversionRate]    Script Date: 28-04-2023 15:22:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblMetricImperialConversionRate](
	[BaseMetricUnitID] [int] NOT NULL,
	[BaseMetricUnit] [varchar](50) NULL,
	[BaseImperialUnitID] [int] NOT NULL,
	[BaseImperialUnit] [varchar](50) NULL,
	[MetricValue] [float] NOT NULL,
	[ImperialValue] [float] NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tblUnitConversionRate]    Script Date: 28-04-2023 15:22:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tblUnitConversionRate](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Unit] [varchar](50) NOT NULL,
	[Type] [varchar](50) NOT NULL,
	[Class] [varchar](50) NULL,
	[BaseUnitRate] [float] NOT NULL,
	[BaseUnitId] [int] NOT NULL
) ON [PRIMARY]
GO
INSERT [dbo].[tblMetricImperialConversionRate] ([BaseMetricUnitID], [BaseMetricUnit], [BaseImperialUnitID], [BaseImperialUnit], [MetricValue], [ImperialValue]) VALUES (1, N'Meter', 9, N'Inch', 1, 39.37)
GO
INSERT [dbo].[tblMetricImperialConversionRate] ([BaseMetricUnitID], [BaseMetricUnit], [BaseImperialUnitID], [BaseImperialUnit], [MetricValue], [ImperialValue]) VALUES (15, N'Gram', 18, N'Pound', 1, 0.002204622)
GO
SET IDENTITY_INSERT [dbo].[tblUnitConversionRate] ON 
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (1, N'Meter', N'Metric', N'Length', 1, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (2, N'Millimeter', N'Metric', N'Length', 0.001, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (3, N'Centimeter', N'Metric', N'Length', 0.01, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (4, N'Decimeter', N'Metric', N'Length', 0.1, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (5, N'Decameter', N'Metric', N'Length', 10, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (7, N'Hectometer', N'Metric', N'Length', 100, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (8, N'Kilometer', N'Metric', N'Length', 1000, 1)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (9, N'Inch', N'Imperial', N'Length', 1, 9)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (10, N'Foot', N'Imperial', N'Length', 12, 9)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (11, N'Yard', N'Imperial', N'Length', 36, 9)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (12, N'Miles', N'Imperial', N'Length', 63360, 9)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (14, N'Milligram', N'Metric', N'Mass', 0.001, 15)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (15, N'Gram', N'Metric', N'Mass', 1, 15)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (16, N'Kilogram', N'Metric', N'Mass', 1000, 15)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (17, N'Tonne', N'Metric', N'Mass', 1000000, 15)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (18, N'Pound', N'Imperial', N'Mass', 1, 18)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (19, N'Ounces', N'Imperial', N'Mass', 0.0625, 18)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (20, N'Celsius', N'Metric', N'Temperature', 1, 0)
GO
INSERT [dbo].[tblUnitConversionRate] ([ID], [Unit], [Type], [Class], [BaseUnitRate], [BaseUnitId]) VALUES (21, N'Fahrenheit', N'Imperial', N'Temperature', 1, 0)
GO
SET IDENTITY_INSERT [dbo].[tblUnitConversionRate] OFF
GO
/****** Object:  StoredProcedure [dbo].[USP_UnitConversion]    Script Date: 28-04-2023 15:22:05 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--Exec USP_UnitConversion 'fahrenheit','102','celsius','metric' 

CREATE PROCEDURE [dbo].[USP_UnitConversion]
@Unit varchar(15)
,@Inputvalue float
,@OutputUnit varchar(15)
,@MetricORImperial varchar(15) 

AS
BEGIN
 
	SET NOCOUNT ON;

	--Parameters  Value, InputUnit, OutputUnit , OutputType
	declare @ConversionType varchar(25) 

	select @ConversionType = Class from tblUnitConversionRate where Unit=@Unit

		Declare @Baseunitvaluefrom float,@InputUnitType varchar(15),@voutputtype varchar(15)

		
		select @Baseunitvaluefrom = case when BaseUnitId = 0 then @Inputvalue else @Inputvalue * BaseUnitRate end, @InputUnitType = [Type]  from tblUnitConversionRate where Unit =  @Unit
 
		 select top 1 @voutputtype = [Type]  from tblUnitConversionRate where [Type] =  @MetricORImperial or Unit = @OutputUnit
 
  
		--select @Baseunitvaluefrom,@InputUnitType,@OutputType
 

	if(@ConversionType = 'Temperature')
	Begin	
			if (@Unit <> @OutputUnit and @InputUnitType <> @voutputtype)
			begin

				--if (@Unit = 'celsius')
				--begin
				
					--select --1 as  ID,
					--'Fahrenheit' as 'Unit','Imperial' as 'Type',@ConversionType as 'Class',   (@Inputvalue * 9/5) + 32  as 'Value'

					select Unit,Type,Class, case when Unit = 'Fahrenheit' then (@Inputvalue * 9/5) + 32 else (@Inputvalue - 32 ) * 5/9 End  as 'Value' from tblUnitConversionRate where 
					[Type] = case when  isnull(@MetricORImperial,'') = '' then [Type] else @MetricORImperial End
					and Unit = case when  isnull(@OutputUnit,'') = '' then Unit else @OutputUnit End
					and class= @ConversionType

				--End
				--else if (@Unit = 'Fahrenheit')
				--begin

				--	select --1 as  ID,
				--	'Celsius' as 'Unit','Metric' as 'Type',@ConversionType as 'Class',   (@Inputvalue - 32 ) * 5/9 as 'Value'


				--End

			End
			Else
			begin

				select --1 as  ID,
				@Unit as 'Unit',case when @Unit = 'Fahrenheit' then 'Imperial' else 'Metric' end as 'Type',@ConversionType as 'Class',   @Inputvalue as 'Value'


			End
			

			 

	End
	else
	begin
		

		select
		--ROW_NUMBER() OVER (ORDER BY [Type],Unit) ID,
		Unit, Type, Class,
		1/BaseUnitRate * 
		(case when @InputUnitType = @voutputtype  then 1 else   case when @voutputtype ='Metric'  then 1/ImperialValue else  ImperialValue End End) 
		* @Baseunitvaluefrom as 'Value'
		from tblUnitConversionRate C join tblMetricImperialConversionRate MIM on C.BaseUnitId  = MIM.BaseMetricUnitID or C.BaseUnitId = MIM.BaseImperialUnitID
		where [Type] = case when  isnull(@MetricORImperial,'') = '' then [Type] else @MetricORImperial End
		and Unit = case when  isnull(@OutputUnit,'') = '' then Unit else @OutputUnit End
		and class= @ConversionType


	end

END
GO
USE [master]
GO
ALTER DATABASE [UnitConverter] SET  READ_WRITE 
GO
